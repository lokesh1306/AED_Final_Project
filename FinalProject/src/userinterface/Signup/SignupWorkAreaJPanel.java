/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.Signup;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.DB4OUtil.DB4OUtil;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.FoodDonor.FoodDonor;
import Business.FoodDonor.FoodDonorDirectory;
import Business.EcoSystem;
import Business.Worker.Worker;
import Business.FoodRequestor.FoodRequestor;
import Business.FoodRequestor.FoodRequestorDirectory;
import Business.Mail.JavaMailUtil;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.Role.AdminRole;
import Business.Role.CustomerRole;
import Business.Role.DonorRole;
import Business.Role.RequestorRole;

import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Insets;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.HomeJPanel;

/**
 *
 * @author sivanagendrakanakababumarada
 */
public class SignupWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SignupWorkAreaJPanel
     */
    EcoSystem ecosystem;
    JPanel userProcessContainer;
    UserAccount ua;
    FoodRequestorDirectory rd;
    FoodRequestor req;
    FoodDonor don;
    FoodDonorDirectory dd;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    public boolean isNotValid = false;
    private String verificationCode;

    private boolean donorFlag = true;
    private boolean organisationFlag = false;
    private boolean restaurantFlag = false;
    private boolean check = false;
    private boolean ageFlag = true;
    public SignupWorkAreaJPanel(JPanel userProcessContainer, EcoSystem ecosystem) throws IOException {

        this.ecosystem = ecosystem;
        this.userProcessContainer = userProcessContainer;

        if (ecosystem.getReqDir() == null) {
            ecosystem.setReqDir(new FoodRequestorDirectory());
        }
        if (ecosystem.getDonDir() == null) {
            ecosystem.setDonDir(new FoodDonorDirectory());
        }

        initComponents();

//        bgImgLabel.setMinimumSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
//        bgImgLabel.setPreferredSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
//        bgImgLabel.setMaximumSize(new Dimension(userProcessContainer.getWidth(), userProcessContainer.getHeight()));
//
        Image img = ImageIO.read(getClass().getResource("/Images/home.png"));
        Image newimg = img.getScaledInstance(39, 41, java.awt.Image.SCALE_SMOOTH);
//
        btnSignupHome.setIcon(new ImageIcon(newimg));
//        
//        
//        Image img1 = ImageIO.read(getClass().getResource("/Images/background2.png"));
//        Image newimg1 = img1.getScaledInstance(userProcessContainer.getWidth(), userProcessContainer.getHeight(), java.awt.Image.SCALE_SMOOTH);
//
//        bgImgLabel.setIcon(new ImageIcon(newimg1));

        rdSignupInd.setSelected(true);
        rdSignupPanel.setVisible(true);
        this.donorFlag = true;
        this.organisationFlag = false;
        this.restaurantFlag = false;
        this.ageFlag = true;
        System.out.println(
                "container width :" + userProcessContainer.getWidth());
//        System.out.println("width : " + bgImgLabel.getWidth());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel = new javax.swing.JLabel();
        btnSignupHome = new javax.swing.JButton();
        txtSignupName = new javax.swing.JTextField();
        lblSignupAge = new javax.swing.JLabel();
        txtSignupAge = new javax.swing.JTextField();
        lblSignupGender = new javax.swing.JLabel();
        lblSignupAddress = new javax.swing.JLabel();
        txtSignupAddrss1 = new javax.swing.JTextField();
        lblSignupCity = new javax.swing.JLabel();
        txtSignupUserCity = new javax.swing.JTextField();
        lblSignupZip = new javax.swing.JLabel();
        txtSignupZipCode = new javax.swing.JTextField();
        lblSignupPhone = new javax.swing.JLabel();
        txtSignupPhone = new javax.swing.JTextField();
        lblSignupUsername = new javax.swing.JLabel();
        txtSignupUserName = new javax.swing.JTextField();
        lblSignupPwd = new javax.swing.JLabel();
        txtSignupPwd = new javax.swing.JTextField();
        lblSignupCPWD = new javax.swing.JLabel();
        txtSignupCPWD = new javax.swing.JTextField();
        lblSignupEmail = new javax.swing.JLabel();
        txtSignupEmail = new javax.swing.JTextField();
        lblIAM = new javax.swing.JLabel();
        cmbIAM = new javax.swing.JComboBox<>();
        cmbSignupGender = new javax.swing.JComboBox<>();
        lblSignupState = new javax.swing.JLabel();
        txtSignupState = new javax.swing.JTextField();
        btnSignupSave = new javax.swing.JButton();
        btnSignupClear = new javax.swing.JButton();
        rdSignupPanel = new javax.swing.JPanel();
        rdSignupRes = new javax.swing.JRadioButton();
        rdSignupInd = new javax.swing.JRadioButton();
        rdSignupOr = new javax.swing.JRadioButton();
        bgImgLabel = new javax.swing.JLabel();
        txtverificationCode = new javax.swing.JTextField();
        submiitBtn = new javax.swing.JButton();
        lblSignupCPWD1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1100, 1000));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jLabel.setText("Name:");
        add(jLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 111, -1, -1));

        btnSignupHome.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        btnSignupHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignupHomeActionPerformed(evt);
            }
        });
        add(btnSignupHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 12, 43, 47));

        txtSignupName.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupNameFocusLost(evt);
            }
        });
        add(txtSignupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 106, 162, -1));

        lblSignupAge.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupAge.setText("Age:");
        add(lblSignupAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(218, 156, -1, -1));

        txtSignupAge.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupAgeFocusLost(evt);
            }
        });
        add(txtSignupAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 151, 162, -1));

        lblSignupGender.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupGender.setText("Gender:");
        add(lblSignupGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 196, -1, -1));

        lblSignupAddress.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupAddress.setText("Address:");
        add(lblSignupAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(193, 246, -1, -1));

        txtSignupAddrss1.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupAddrss1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupAddrss1FocusLost(evt);
            }
        });
        add(txtSignupAddrss1, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 241, 162, -1));

        lblSignupCity.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupCity.setText("City:");
        add(lblSignupCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 291, -1, -1));

        txtSignupUserCity.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupUserCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupUserCityFocusLost(evt);
            }
        });
        txtSignupUserCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSignupUserCityActionPerformed(evt);
            }
        });
        add(txtSignupUserCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 285, 162, -1));

        lblSignupZip.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupZip.setText("Zip:");
        add(lblSignupZip, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 378, -1, -1));

        txtSignupZipCode.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupZipCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupZipCodeFocusLost(evt);
            }
        });
        add(txtSignupZipCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 375, 162, -1));

        lblSignupPhone.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupPhone.setText("Phone Number:");
        add(lblSignupPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 420, -1, -1));

        txtSignupPhone.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupPhone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupPhoneFocusLost(evt);
            }
        });
        add(txtSignupPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 420, 162, -1));

        lblSignupUsername.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupUsername.setText("Username:");
        add(lblSignupUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 458, -1, -1));

        txtSignupUserName.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupUserName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupUserNameFocusLost(evt);
            }
        });
        add(txtSignupUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 455, 162, -1));

        lblSignupPwd.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupPwd.setText("Password:");
        add(lblSignupPwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(188, 499, -1, -1));

        txtSignupPwd.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupPwd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupPwdFocusLost(evt);
            }
        });
        txtSignupPwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSignupPwdActionPerformed(evt);
            }
        });
        add(txtSignupPwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 500, 162, -1));

        lblSignupCPWD.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupCPWD.setText("Confirm Password:");
        add(lblSignupCPWD, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 548, -1, -1));

        txtSignupCPWD.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupCPWD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupCPWDFocusLost(evt);
            }
        });
        add(txtSignupCPWD, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 545, 162, -1));

        lblSignupEmail.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupEmail.setText("Email ID: ");
        add(lblSignupEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 589, -1, -1));

        txtSignupEmail.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupEmailFocusLost(evt);
            }
        });
        add(txtSignupEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 584, 162, -1));

        lblIAM.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblIAM.setText("I am a:");
        add(lblIAM, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 30, -1, -1));

        cmbIAM.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        cmbIAM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food Donor", "Food Requestor" }));
        cmbIAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIAMActionPerformed(evt);
            }
        });
        add(cmbIAM, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 26, 162, -1));

        cmbSignupGender.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        cmbSignupGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female", "Male", "Others" }));
        add(cmbSignupGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 196, 162, -1));

        lblSignupState.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupState.setText("State:");
        add(lblSignupState, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 330, -1, -1));

        txtSignupState.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        txtSignupState.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSignupStateFocusLost(evt);
            }
        });
        add(txtSignupState, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 331, 162, -1));

        btnSignupSave.setBackground(new java.awt.Color(0, 153, 204));
        btnSignupSave.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        btnSignupSave.setText("Create");
        btnSignupSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignupSaveActionPerformed(evt);
            }
        });
        add(btnSignupSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 630, -1, -1));

        btnSignupClear.setBackground(new java.awt.Color(0, 153, 204));
        btnSignupClear.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        btnSignupClear.setText("Clear");
        btnSignupClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignupClearActionPerformed(evt);
            }
        });
        add(btnSignupClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 630, 80, -1));

        rdSignupPanel.setOpaque(false);

        rdSignupRes.setFont(new java.awt.Font("Trebuchet MS", 1, 13)); // NOI18N
        rdSignupRes.setText("Restaurant");
        rdSignupRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdSignupResActionPerformed(evt);
            }
        });

        rdSignupInd.setFont(new java.awt.Font("Trebuchet MS", 1, 13)); // NOI18N
        rdSignupInd.setText("Individual");
        rdSignupInd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdSignupIndActionPerformed(evt);
            }
        });

        rdSignupOr.setFont(new java.awt.Font("Trebuchet MS", 1, 13)); // NOI18N
        rdSignupOr.setText("Organisation");
        rdSignupOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdSignupOrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rdSignupPanelLayout = new javax.swing.GroupLayout(rdSignupPanel);
        rdSignupPanel.setLayout(rdSignupPanelLayout);
        rdSignupPanelLayout.setHorizontalGroup(
            rdSignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rdSignupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdSignupRes)
                .addGap(18, 18, 18)
                .addComponent(rdSignupOr)
                .addGap(18, 18, 18)
                .addComponent(rdSignupInd)
                .addContainerGap())
        );
        rdSignupPanelLayout.setVerticalGroup(
            rdSignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rdSignupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rdSignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdSignupRes)
                    .addComponent(rdSignupOr)
                    .addComponent(rdSignupInd))
                .addContainerGap())
        );

        add(rdSignupPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, -1, -1));

        bgImgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/blurbg.jpeg"))); // NOI18N
        bgImgLabel.setMaximumSize(new java.awt.Dimension(1100, 1000));
        bgImgLabel.setPreferredSize(new java.awt.Dimension(1100, 1000));
        add(bgImgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(483, 0, 910, -1));

        txtverificationCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtverificationCodeActionPerformed(evt);
            }
        });
        add(txtverificationCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(331, 663, 75, -1));

        submiitBtn.setText("Submit");
        submiitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submiitBtnActionPerformed(evt);
            }
        });
        add(submiitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 699, -1, -1));

        lblSignupCPWD1.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        lblSignupCPWD1.setText("Confirmation Code:");
        add(lblSignupCPWD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 662, -1, 25));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSignupHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignupHomeActionPerformed
        try {
            // TODO add your handling code here:
            HomeJPanel sp = new HomeJPanel(userProcessContainer);
            userProcessContainer.add("Home", sp);
            CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
            crdLyt.show(userProcessContainer, "Home");

        } catch (IOException ex) {
            Logger.getLogger(SignupWorkAreaJPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSignupHomeActionPerformed

    private void txtSignupUserCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSignupUserCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSignupUserCityActionPerformed

    private void btnSignupClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignupClearActionPerformed
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_btnSignupClearActionPerformed

    public boolean isValid(String test, String regex) {
//        String regex = "^[A-Za-z0-9]+";
        Pattern p = Pattern.compile(regex);

        if (test == null) {
            return false;
        }

        Matcher m = p.matcher(test);

        return m.matches();
    }

    public Integer tryParse(String text) {

        try {
            return Integer.valueOf(text);
        } catch (NumberFormatException e) {
            return -1;
        }

    }


    private void btnSignupSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignupSaveActionPerformed
        // TODO add your handling code here:
        verificationCode = JavaMailUtil.getRandomCode();
        isNotValid = false;
//        isNotValid = mandatoryValidations();
//        if (isNotValid) {
//            return;
//        }

        String regName = txtSignupName.getText();
        String regAgeString = txtSignupAge.getText();

        String phone = txtSignupPhone.getText();
        String regAdds = txtSignupAddrss1.getText();
        String regCity = txtSignupUserCity.getText();
        String regState = txtSignupState.getText();
        String regZip = txtSignupZipCode.getText();
        String regUser = txtSignupUserName.getText();
        String regPswd = txtSignupPwd.getText();
        String regMail = txtSignupEmail.getText();

        if (!isValid(regName, "^[A-Za-z]{3,}")) {
            JOptionPane.showMessageDialog(this, "Please enter valid name");
            return;
        }
        Integer regAge = tryParse(regAgeString);
        if (regAge < 0 && ageFlag ) {
            JOptionPane.showMessageDialog(this, "Please enter valid Age");
            return;
        }
        if (regAdds.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter valid address");
            return;
        }

        if (!isValid(regCity, "([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+){3,}")) {
            JOptionPane.showMessageDialog(this, "Please enter valid city");
            return;
        }
        if (!isValid(regState, "([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+){2,}")) {
            JOptionPane.showMessageDialog(this, "Please enter valid state");
            return;
        }

        if (!isValid(regZip, "^[0-9]{5}(?:-[0-9]{4})?$")) {
            JOptionPane.showMessageDialog(this, "Please enter valid zip");
            return;
        }
        if (!isValid(phone, "[+]?[0-9]{10,13}")) {
            JOptionPane.showMessageDialog(this, "Please enter valid phone number");
            return;
        }

        if (!isValid(regUser, "^[a-zA-Z0-9._-]{6,}$")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid username of atleast 6 characters");
            return;
        }
        if (!isValid(regPswd, "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid password of atleast 8 characters in length. It must contain a number, a specicial character, a lowercase and an uppercase character.");
            return;
        }
        if (!txtSignupPwd.getText().equals(txtSignupCPWD.getText())) {
            JOptionPane.showMessageDialog(this, "conformation password doesn't match with given password");
            return;
        }
        if (!isValid(regMail, "[a-zA-Z0-9_\\- \\.]+[@][a-z]+[\\.]+[a-z]{2,3}")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid mail");
            return;
        }

        try {
//                logger.log(Level.INFO, "Sending email to new user");
            JavaMailUtil.sendMail(txtSignupEmail.getText(), txtSignupName.getText(), verificationCode);
            JOptionPane.showMessageDialog(this, "Confirmation Mail is sent to the user");
        } catch (Exception ex) {
            System.out.println("error in sending verification code!! " + ex);
        }
//        if(!check)
//        {
////            JOptionPane.showMessageDialog(this, "please enter valid verification code sent to your mail");
//            return ;
//        }

//        UserAccountDirectory usersList = ecosystem.getUserAccountDirectory();
//        String role = (String) cmbIAM.getSelectedItem();
//        Worker employee = new Worker();
//        employee.setName(txtSignupName.getText());
//        boolean userDoNotExists = true;
//        ArrayList<UserAccount> users = usersList.getUserAccountList();
//        for (UserAccount ua : users) {
//            if (ua.getUsername().equals(txtSignupUserName.getText())) {
//                userDoNotExists = false;
//            }
//        }
//
//        if (userDoNotExists) {
//            if (txtSignupPwd.getText().equals(txtSignupCPWD.getText())) {
//                switch (role) {
//                    case "Food Requestor":
//                        usersList.createUserAccount(txtSignupUserName.getText(), txtSignupPwd.getText(), employee, new RequestorRole());
//                        ua = usersList.getUserAccount(txtSignupUserName.getText());
//                        req = new FoodRequestor(ua);
//                        req.setReqType(getReqType());
//                        req.setReqName(txtSignupName.getText());
//                        req.setReqAddres(txtSignupAddrss1.getText());
//                        req.setReqCity(txtSignupUserCity.getText());
//                        req.setReqState(txtSignupState.getText());
//                        req.setReqEmail(txtSignupEmail.getText());
//                        req.setReqPhno(txtSignupPhone.getText());
//                        req.setReqZipcode(txtSignupZipCode.getText());
//                        req.setReqUserName(txtSignupUserName.getText());
//                        req.setReqPwd(txtSignupPwd.getText());
//
//                        rd = ecosystem.getReqDir();
//                        rd.addReqDir(req);
//                        ecosystem.setReqDir(rd);
//                        if (donorFlag == true && organisationFlag == false && restaurantFlag == false) {
//                            Integer reqstorCnt = ecosystem.getRequestorsCnt();
//                            ecosystem.setRequestorsCnt(reqstorCnt + 1);
//                        } else if (donorFlag == false && organisationFlag == true && restaurantFlag == false) {
//                            Integer orgCnt = ecosystem.getOrganisationsCnt();
//                            ecosystem.setOrganisationsCnt(orgCnt + 1);
//                        }
//
//                        break;
//
//                    case "Food Donor":
//                        usersList.createUserAccount(txtSignupUserName.getText(), txtSignupPwd.getText(), employee, new DonorRole());
//                        ua = usersList.getUserAccount(txtSignupUserName.getText());
//                        don = new FoodDonor(ua);
//                        don.setDonorType(role);
//
//                        don.setDonorName(txtSignupName.getText());
//                        don.setDonorAddres(txtSignupAddrss1.getText());
//                        don.setDonorCity(txtSignupUserCity.getText());
//                        don.setDonorState(txtSignupState.getText());
//                        don.setDonorEmail(txtSignupEmail.getText());
//                        don.setDonorPhno(txtSignupPhone.getText());
//                        don.setDonorZipcode(txtSignupZipCode.getText());
//                        don.setDonPwd(txtSignupUserName.getText());
//                        don.setDonPwd(txtSignupPwd.getText());
//                        if (donorFlag == true && organisationFlag == false && restaurantFlag == false) {
//                            Integer donCnt = ecosystem.getDonorsCnt();
//                            ecosystem.setDonorsCnt(donCnt + 1);
//                        } else if (donorFlag == false && organisationFlag == true && restaurantFlag == false) {
//                            Integer orgCnt = ecosystem.getOrganisationsCnt();
//                            ecosystem.setOrganisationsCnt(orgCnt + 1);
//                        } else if (donorFlag == false && organisationFlag == false && restaurantFlag == true) {
//                            Integer restaurantCnt = ecosystem.getRestaurentCnt();
//                            ecosystem.setRestaurentCnt(restaurantCnt + 1);
//                        }
//
//                        break;
//                    default:
//                        break;
//
//                }
//
//                try {
////                logger.log(Level.INFO, "Sending email to new user");
//                    JavaMailUtil.sendMail(txtSignupEmail.getText(), txtSignupName.getText(), verificationCode);
//                } catch (Exception ex) {
//                }
//                JOptionPane.showMessageDialog(this, "Confirmation Mail is sent to the user");
//
//                clearFields();
//            } else {
//                JOptionPane.showMessageDialog(this, "Password and confirm password does not match");
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "UserName already exist");
//        }

    }//GEN-LAST:event_btnSignupSaveActionPerformed

    private void rdSignupResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdSignupResActionPerformed
        // TODO add your handling code here:
        if (rdSignupRes.isSelected()) {
            rdSignupOr.setSelected(false);
            rdSignupInd.setSelected(false);
            ageFlag = false;
            txtSignupAge.setEditable(false);
            txtSignupAge.setEnabled(false);
            cmbSignupGender.setEditable(false);
            cmbSignupGender.setEnabled(false);
            this.donorFlag = false;
            this.organisationFlag = false;
            this.restaurantFlag = true;
        } else if (rdSignupRes.isSelected() == false && rdSignupOr.isSelected() == false && rdSignupInd.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Please Provide Donor Type!!");
        }


    }//GEN-LAST:event_rdSignupResActionPerformed

    private void rdSignupOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdSignupOrActionPerformed
        // TODO add your handling code here:
        if (rdSignupOr.isSelected()) {
            rdSignupRes.setSelected(false);
            rdSignupInd.setSelected(false);
            ageFlag = false;
            txtSignupAge.setEditable(false);
            txtSignupAge.setEnabled(false);
            cmbSignupGender.setEditable(false);
            cmbSignupGender.setEnabled(false);
            this.donorFlag = false;
            this.organisationFlag = true;
            this.restaurantFlag = false;
        } else if (rdSignupRes.isSelected() == false && rdSignupOr.isSelected() == false && rdSignupInd.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Please Provide Donor Type!!");
        }
    }//GEN-LAST:event_rdSignupOrActionPerformed

    private void rdSignupIndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdSignupIndActionPerformed
        // TODO add your handling code here:
        if (rdSignupInd.isSelected()) {
            rdSignupOr.setSelected(false);
            rdSignupRes.setSelected(false);
            ageFlag = true;
            txtSignupAge.setEditable(true);
            txtSignupAge.setEnabled(true);
            cmbSignupGender.setEditable(true);
            cmbSignupGender.setEnabled(true);
            this.donorFlag = true;
            this.organisationFlag = false;
            this.restaurantFlag = false;
        } else if (rdSignupRes.isSelected() == false && rdSignupOr.isSelected() == false && rdSignupInd.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Please Provide Donor Type!!");
        }
    }//GEN-LAST:event_rdSignupIndActionPerformed

    private void cmbIAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIAMActionPerformed
        // TODO add your handling code here:

        if (cmbIAM.getSelectedIndex() == 0) {
            // rdPanel.setVisible(true);
            rdSignupRes.setVisible(true);
            rdSignupOr.setText("Organization");

        } else {
            // rdPanel.setVisible(false);
            rdSignupRes.setVisible(false);
            rdSignupOr.setText("Orphanage/Old Age Home");

        }

    }//GEN-LAST:event_cmbIAMActionPerformed

    private void txtSignupNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupNameFocusLost
        // TODO add your handling code here:
//        nameValidation();
    }//GEN-LAST:event_txtSignupNameFocusLost

    private void txtSignupAgeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupAgeFocusLost
        // TODO add your handling code here:
//        ageValidation();
    }//GEN-LAST:event_txtSignupAgeFocusLost

    private void txtSignupAddrss1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupAddrss1FocusLost
        // TODO add your handling code here:
//        addressValidation();
    }//GEN-LAST:event_txtSignupAddrss1FocusLost

    private void txtSignupUserCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupUserCityFocusLost
        // TODO add your handling code here:
//        cityValidation();
    }//GEN-LAST:event_txtSignupUserCityFocusLost

    private void txtSignupStateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupStateFocusLost
        // TODO add your handling code here:
//        stateValidation();
    }//GEN-LAST:event_txtSignupStateFocusLost

    private void txtSignupZipCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupZipCodeFocusLost
        // TODO add your handling code here:
//        zipValidation();
    }//GEN-LAST:event_txtSignupZipCodeFocusLost

    private void txtSignupPhoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupPhoneFocusLost
        // TODO add your handling code here:
//        phnValidation();
    }//GEN-LAST:event_txtSignupPhoneFocusLost

    private void txtSignupUserNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupUserNameFocusLost
        // TODO add your handling code here:
//        userNameValidation();
    }//GEN-LAST:event_txtSignupUserNameFocusLost

    private void txtSignupPwdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupPwdFocusLost
        // TODO add your handling code here:
//        pwdValidation();
    }//GEN-LAST:event_txtSignupPwdFocusLost

    private void txtSignupCPWDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupCPWDFocusLost
        // TODO add your handling code here:
//        cnfPwdValidation();
    }//GEN-LAST:event_txtSignupCPWDFocusLost

    private void txtSignupEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSignupEmailFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_txtSignupEmailFocusLost

    private void txtverificationCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtverificationCodeActionPerformed
        if (verificationCode.equals(txtverificationCode.getText())) {
            JOptionPane.showMessageDialog(this, " Email verified");
            check = true;
        } else {
            JOptionPane.showMessageDialog(this, " please enter correct code");
        }
        txtverificationCode.setText("");
    }//GEN-LAST:event_txtverificationCodeActionPerformed

    private void submiitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submiitBtnActionPerformed
        if (txtverificationCode.getText().equals(verificationCode)) {

            UserAccountDirectory usersList = ecosystem.getUserAccountDirectory();
            String role = (String) cmbIAM.getSelectedItem();
            Worker employee = new Worker();
            employee.setName(txtSignupName.getText());
            boolean userDoNotExists = true;
            ArrayList<UserAccount> users = usersList.getUserAccountList();
            for (UserAccount ua : users) {
                if (ua.getUsername().equals(txtSignupUserName.getText())) {
                    userDoNotExists = false;
                }
            }

            if (userDoNotExists) {
                if (txtSignupPwd.getText().equals(txtSignupCPWD.getText())) {
                    switch (role) {
                        case "Food Requestor":
                            usersList.createUserAccount(txtSignupUserName.getText(), txtSignupPwd.getText(), employee, new RequestorRole());
                            ua = usersList.getUserAccount(txtSignupUserName.getText());
                            req = new FoodRequestor(ua);
                            req.setReqType(getReqType());
                            req.setReqName(txtSignupName.getText());
                            req.setReqAddres(txtSignupAddrss1.getText());
                            req.setReqCity(txtSignupUserCity.getText());
                            req.setReqState(txtSignupState.getText());
                            req.setReqEmail(txtSignupEmail.getText());
                            req.setReqPhno(txtSignupPhone.getText());
                            req.setReqZipcode(txtSignupZipCode.getText());
                            req.setReqUserName(txtSignupUserName.getText());
                            req.setReqPwd(txtSignupPwd.getText());

                            rd = ecosystem.getReqDir();
                            rd.addReqDir(req);
                            ecosystem.setReqDir(rd);
                            if (donorFlag == true && organisationFlag == false && restaurantFlag == false) {
                                Integer reqstorCnt = ecosystem.getRequestorsCnt();
                                ecosystem.setRequestorsCnt(reqstorCnt + 1);
                            } else if (donorFlag == false && organisationFlag == true && restaurantFlag == false) {
                                Integer orgCnt = ecosystem.getOrganisationsCnt();
                                ecosystem.setOrganisationsCnt(orgCnt + 1);
                            }

                            break;

                        case "Food Donor":
                            usersList.createUserAccount(txtSignupUserName.getText(), txtSignupPwd.getText(), employee, new DonorRole());
                            ua = usersList.getUserAccount(txtSignupUserName.getText());
                            don = new FoodDonor(ua);
                            don.setDonorType(role);

                            don.setDonorName(txtSignupName.getText());
                            don.setDonorAddres(txtSignupAddrss1.getText());
                            don.setDonorCity(txtSignupUserCity.getText());
                            don.setDonorState(txtSignupState.getText());
                            don.setDonorEmail(txtSignupEmail.getText());
                            don.setDonorPhno(txtSignupPhone.getText());
                            don.setDonorZipcode(txtSignupZipCode.getText());
                            don.setDonPwd(txtSignupUserName.getText());
                            don.setDonPwd(txtSignupPwd.getText());
                            if (donorFlag == true && organisationFlag == false && restaurantFlag == false) {
                                Integer donCnt = ecosystem.getDonorsCnt();
                                ecosystem.setDonorsCnt(donCnt + 1);
                            } else if (donorFlag == false && organisationFlag == true && restaurantFlag == false) {
                                Integer orgCnt = ecosystem.getOrganisationsCnt();
                                ecosystem.setOrganisationsCnt(orgCnt + 1);
                            } else if (donorFlag == false && organisationFlag == false && restaurantFlag == true) {
                                Integer restaurantCnt = ecosystem.getRestaurentCnt();
                                ecosystem.setRestaurentCnt(restaurantCnt + 1);
                            }

                            break;
                        default:
                            break;

                    }

//                    try {
////                logger.log(Level.INFO, "Sending email to new user");
//                        JavaMailUtil.sendMail(txtSignupEmail.getText(), txtSignupName.getText(), verificationCode);
//                    } catch (Exception ex) {
//                    }
//                    JOptionPane.showMessageDialog(this, "Confirmation Mail is sent to the user");

                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Password and confirm password does not match");
                }
            } else {
                JOptionPane.showMessageDialog(this, "UserName already exist");
            }

            dd = ecosystem.getDonDir();
            dd.addDonDir(don);
            ecosystem.setDonDir(dd);
            System.out.println("email code validated");
            JOptionPane.showMessageDialog(this, "User verified and created successfully");
        } else {
            JOptionPane.showMessageDialog(this, "please enter valid verification code send to your mail");
        }

        txtverificationCode.setText("");
    }//GEN-LAST:event_submiitBtnActionPerformed

    private void txtSignupPwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSignupPwdActionPerformed
        pwdValidation();
    }//GEN-LAST:event_txtSignupPwdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgImgLabel;
    private javax.swing.JButton btnSignupClear;
    private javax.swing.JButton btnSignupHome;
    private javax.swing.JButton btnSignupSave;
    private javax.swing.JComboBox<String> cmbIAM;
    private javax.swing.JComboBox<String> cmbSignupGender;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel lblIAM;
    private javax.swing.JLabel lblSignupAddress;
    private javax.swing.JLabel lblSignupAge;
    private javax.swing.JLabel lblSignupCPWD;
    private javax.swing.JLabel lblSignupCPWD1;
    private javax.swing.JLabel lblSignupCity;
    private javax.swing.JLabel lblSignupEmail;
    private javax.swing.JLabel lblSignupGender;
    private javax.swing.JLabel lblSignupPhone;
    private javax.swing.JLabel lblSignupPwd;
    private javax.swing.JLabel lblSignupState;
    private javax.swing.JLabel lblSignupUsername;
    private javax.swing.JLabel lblSignupZip;
    private javax.swing.JRadioButton rdSignupInd;
    private javax.swing.JRadioButton rdSignupOr;
    private javax.swing.JPanel rdSignupPanel;
    private javax.swing.JRadioButton rdSignupRes;
    private javax.swing.JButton submiitBtn;
    private javax.swing.JTextField txtSignupAddrss1;
    private javax.swing.JTextField txtSignupAge;
    private javax.swing.JTextField txtSignupCPWD;
    private javax.swing.JTextField txtSignupEmail;
    private javax.swing.JTextField txtSignupName;
    private javax.swing.JTextField txtSignupPhone;
    private javax.swing.JTextField txtSignupPwd;
    private javax.swing.JTextField txtSignupState;
    private javax.swing.JTextField txtSignupUserCity;
    private javax.swing.JTextField txtSignupUserName;
    private javax.swing.JTextField txtSignupZipCode;
    private javax.swing.JTextField txtverificationCode;
    // End of variables declaration//GEN-END:variables

    private boolean mandatoryValidations() {
        if (txtSignupName.getText().isEmpty() || txtSignupName.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Name!!");
            return true;
        }

        if (txtSignupAge.isEnabled()) {
            if (txtSignupAge.getText().isEmpty() || txtSignupAge.getText() == "") {
                JOptionPane.showMessageDialog(this, "Please Provide Age!!");
                return true;
            }
        }

        if (txtSignupAddrss1.getText().isEmpty() || txtSignupAddrss1.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Address!!");
            return true;
        }

        if (txtSignupUserCity.getText().isEmpty() || txtSignupUserCity.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide City!!");
            return true;
        }

        if (txtSignupState.getText().isEmpty() || txtSignupState.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide State!!");
            return true;
        }

        if (txtSignupZipCode.getText().isEmpty() || txtSignupZipCode.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide ZipCode!!");
            return true;
        }

        if (txtSignupPhone.getText().isEmpty() || txtSignupPhone.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Phone No!!");
            return true;
        }
        if (txtSignupUserName.getText().isEmpty() || txtSignupUserName.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide User Name!!");
            return true;
        }
        if (txtSignupPwd.getText().isEmpty() || txtSignupPwd.getText() == "" || txtSignupPwd.getText().length() < 8) {
            JOptionPane.showMessageDialog(this, "Please Provide Password!!");
            return true;
        }
        if (txtSignupCPWD.getText().isEmpty() || txtSignupCPWD.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please  Confirm Password!!");
            return true;
        }
        if (txtSignupEmail.getText().isEmpty() || txtSignupEmail.getText() == "") {
            JOptionPane.showMessageDialog(this, "Please Provide Email!!");
            return true;
        }

        if (!rdSignupRes.isSelected() && !rdSignupOr.isSelected() && !rdSignupInd.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please Provide Resident Address!!");
            return true;
        }

        return isNotValid;
    }

    private boolean nameValidation() {
        isNotValid = false;
        if ((!txtSignupName.getText().isEmpty()) && !txtSignupName.getText().matches("^[A-Za-z]{3,}")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Name !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean ageValidation() {
        isNotValid = false;
        if (txtSignupAge.isEnabled()) {
            if ((!txtSignupAge.getText().isEmpty()) && !txtSignupAge.getText().matches("^[0-9]*$")) {
//                && Integer.parseInt(txtAge.getText().toString()) < 0 && Integer.parseInt(txtAge.getText().toString()) > 100
                JOptionPane.showMessageDialog(this, "Please Provide Only Numbers !!");
                isNotValid = true;
                return isNotValid;
            }
            if ((!txtSignupAge.getText().isEmpty()) && (Integer.parseInt(txtSignupAge.getText().toString()) < 0 || Integer.parseInt(txtSignupAge.getText().toString()) > 100)) {
                JOptionPane.showMessageDialog(this, "Please Provide Valid Age !!");
                isNotValid = true;
                return isNotValid;
            }
        }
        return isNotValid;
    }

    private boolean addressValidation() {
        isNotValid = false;
        if ((!txtSignupAddrss1.getText().isEmpty()) && !txtSignupAddrss1.getText().matches("^[#.0-9a-zA-Z ]+$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Address !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean cityValidation() {
        isNotValid = false;
        if ((!txtSignupUserCity.getText().isEmpty()) && !txtSignupUserCity.getText().matches("([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+){3,}")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid City !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean userNameValidation() {
        isNotValid = false;
        if ((!txtSignupUserName.getText().isEmpty()) && !txtSignupUserName.getText().matches("^[a-zA-Z0-9._-]{6,}$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid User Name !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean pwdValidation() {
        isNotValid = false;
        if ((!txtSignupPwd.getText().isEmpty()) && !txtSignupPwd.getText().matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$") && txtSignupPwd.getText().length() < 8) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Password !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean cnfPwdValidation() {
        isNotValid = false;
        if ((!txtSignupCPWD.getText().isEmpty()) && !txtSignupCPWD.getText().matches("^[a-zA-Z0-9]+$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Password !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean phnValidation() {
        isNotValid = false;
        if ((!txtSignupPhone.getText().isEmpty()) && !txtSignupPhone.getText().matches("^(\\+\\d{1,3}( )?)?((\\(\\d{3}\\))|\\d{3})[- .]?\\d{3}[- .]?\\d{4}$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Phone Number !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean emailValidation() {
        isNotValid = false;
        if ((!txtSignupEmail.getText().isEmpty()) && !txtSignupEmail.getText().matches("[a-zA-Z0-9_\\- \\.]+[@][a-z]+[\\.]+[a-z]{2,3}")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Email Address !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean zipValidation() {
        isNotValid = false;
        if ((!txtSignupZipCode.getText().isEmpty()) && !txtSignupZipCode.getText().matches("^[0-9]{5}(?:-[0-9]{4})?$")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid Zip Code !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private boolean stateValidation() {
        isNotValid = false;
        if ((!txtSignupState.getText().isEmpty()) && !txtSignupState.getText().matches("([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+){2,}")) {
            JOptionPane.showMessageDialog(this, "Please Provide Valid State !!");
            isNotValid = true;
        }
        return isNotValid;
    }

    private String getReqType() {
        String requestorType = "";
        if (rdSignupOr.isSelected()) {
            requestorType = "Organization";
        } else if (rdSignupInd.isSelected()) {
            requestorType = "Individual";
        } else if (rdSignupRes.isSelected()) {
            requestorType = "Restaurant";
        }
        return requestorType;
    }

    private void clearFields() {

        txtSignupName.setText("");
        txtSignupAddrss1.setText("");
        txtSignupUserCity.setText("");
        txtSignupAge.setText("");
        cmbSignupGender.setSelectedIndex(0);
        txtSignupState.setText("");
        txtSignupEmail.setText("");
        txtSignupPhone.setText("");
        txtSignupZipCode.setText("");
        txtSignupPwd.setText("");
        txtSignupUserName.setText("");
        txtSignupCPWD.setText("");
        cmbIAM.setSelectedIndex(0);
        rdSignupInd.setSelected(true);
        rdSignupOr.setSelected(false);
        rdSignupRes.setSelected(false);
        this.donorFlag = true;
        this.organisationFlag = false;
        this.restaurantFlag = false;
        check = false;
        ageFlag = true;
    }

}
